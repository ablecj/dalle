import React, { useState, useEffect } from "react";
import { Card, Loader, FormField } from "../Components";

const RenderCards = ({data, title}) =>{
    if(data?.length > 0 ){
        return data.map((post)=> <Card  key={post._id} {...post}/>)
    }
    return (
     <h2 className="mt-5 font-bold text-[#6449ff] text-xl
     uppercase">{title}</h2>
    )
}

const Home = () => {
  const [Loading, setLoading] = useState(false);
  const [allPosts, setAllPost] = useState(null);
  const [searchText, setSearchText] = useState("");
  const[searchedResults,setSearchResults]= useState(null)
  const [searchTimeOut, setSearchTimeOut] = useState(null)

  // console.log("searched result", searchedResults)
  // console.log("allpost result", allPosts)

  useEffect(()=>{
    const fetchPosts = async ()=>{
      setLoading(true);

      try {
        const response = await fetch ('http://localhost:8080/api/v1/post',{
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        })

        if(response.ok){
          const result = await response.json();

          setAllPost(result.data.reverse());
        }
      } catch (error) {
        alert(error)
      }finally{
        setLoading(false)
      }

    }

    fetchPosts();
  },[]);

  const handleSearchChange = (e)=>{
    clearTimeout(searchTimeOut);

    setSearchText(e.target.value);

    setSearchTimeOut(
      setTimeout(()=>{
        const searchResults = allPosts.filter((item)=>item.name.toLowerCase().includes(searchText.toLowerCase())
        || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
  
        setSearchResults(searchResults);
      },500)
    );
   
  }

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1
          className="font-extrabold 
            text-[#222328] text-[32px] "
        >
          The Community Show Case
        </h1>
        <p
          className="mt-2 text-[#666e75] 
        text-[16px] max-w-[500px]"
        >
          Browse through a collection of imaginative and visually stunning
          images generated by DALL-E 2.0
        </p>
      </div>

      <div className="mt-16">
        <FormField 
        labelName="search posts"
        type="text"
        name="text"
        placeholder="Search posts"
        value={searchText}
        handleChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {Loading ? (
          <div className="justify-center item-center flex">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2
                className="font-medium
                 text-[#666e75]
                text-xl mb-3"
              >
                Showing Result For <span className="text-[#222328]">{searchText}</span>
              </h2>
            )}

            <div className="grid lg:grid-cols-4 
            sm:grid-cols-3 xs:grid-cols-2 
            grid-cols-1 gap-3">
               {searchText ? (
                <RenderCards 
                data={searchedResults ? Object.keys(searchedResults).map(key => searchedResults[key]) : []}
                title= "No search result found"
                />
               ):(
               <RenderCards 
                data={allPosts ? Object.keys(allPosts).map(key => allPosts[key]) : []}
                title="No posts found"
                 />
               )} 
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;
